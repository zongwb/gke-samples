apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: ./kompose convert
    kompose.version: ""
  creationTimestamp: null
  labels:
    io.kompose.service: db-demo
  name: db-demo
spec:
  replicas: 1
  strategy: {}
  selector:
    matchLabels:
      io.kompose.service: db-demo
  template:
    metadata:
      creationTimestamp: null
      labels:
        io.kompose.service: db-demo
    spec:
      automountServiceAccountToken: false
      serviceAccountName: ${K8S_SA}
      containers:
      - env:
        - name: PGDATABASE
          value: ${PGDATABASE}
        - name: PGHOST
          value: "127.0.0.1"
        - name: PGPORT
          value: "5432"
        - name: PGUSER
          value: ${PGUSER}
        - name: PGPASSWORD
          valueFrom:
            secretKeyRef:
              name: db-secrets
              key: pg_password
        image: gcr.io/${PROJECT_ID}/db-demo:${DB_DEMO_VERSION}
        name: db-demo
        ports:
        - containerPort: 3000
        resources: {}

      - name: cloud-sql-proxy
        image: gcr.io/cloudsql-docker/gce-proxy:1.30.0
        command:
          - "/cloud_sql_proxy"
          - "-log_debug_stdout"
          - "-instances=${PG_CONN_NAME}=tcp:5432"
        securityContext:
          runAsNonRoot: true
        resources:
          requests:
            memory: "2Gi"
            cpu:    "1"

      # nodeSelector:
      #   cloud.google.com/gke-nodepool: ${NODE_POOL}
      restartPolicy: Always
status: {}
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    kompose.cmd: ./kompose convert
    kompose.version: ""
  creationTimestamp: null
  labels:
    io.kompose.service: db-demo
  name: db-demo
# spec:
#   type: NodePort
#   ports:
#   - name: "3000"
#     port: 3000
#     targetPort: 3000
#   selector:
#     io.kompose.service: db-demo
# status:
#   loadBalancer: {}
spec:
  type: ClusterIP
  selector:
    io.kompose.service: db-demo
  ports:
  - name: http
    port: 80
    targetPort: 3000